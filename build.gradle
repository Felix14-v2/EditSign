buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath("com.google.guava:guava:30.1.1-jre")
        classpath("commons-io:commons-io:2.8.0")
    }
}

plugins {
    id 'com.matthewprenger.cursegradle' version '1.4.0'
    id 'com.modrinth.minotaur' version '1.2.0'
    id "com.github.breadmoirai.github-release" version '2.2.12'
    id "com.github.ben-manes.versions" version "0.38.0"
}

allprojects {
    apply plugin: "java"

    java.toolchain.languageVersion = JavaLanguageVersion.of(8)

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
        options.compilerArgs = ['-Xlint:deprecation']
    }
}

group = "fr.raksrinana"
archivesBaseName = "${project.modName}-${project.minecraft_version}"

task buildJar(type: Jar, group: "modding") {
    dependsOn ":common:jar", ":fabric:build", ":forge:build"
    finalizedBy ":forge:signJar"

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from zipTree("common/build/libs/common-${project.version}.jar"),
            zipTree("fabric/build/libs/fabric-${project.version}.jar"),
            zipTree("forge/build/libs/forge-${project.version}.jar")

    manifest {
        attributes([
                "Specification-Title"     : project.modId,
                "Specification-Vendor"    : "RakSrinaNa",
                "Specification-Version"   : project.version,
                "Implementation-Title"    : project.modName,
                "Implementation-Version"  : "${project.version}",
                "Implementation-Vendor"   : "RakSrinaNa",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}
assemble.finalizedBy("buildJar")

curseforge {
    apiKey = "${project.findProperty("curseforgeApiKey")}"
    project {
        id = "${project.curseforge_project_id}"
        changelogType = 'markdown'
        addGameVersion project.minecraft_version
        changelog = generateChangelog()
        releaseType = "${project.releaseType}"
        mainArtifact(jar) {
            displayName = "${archivesBaseName}-${project.version}"
        }
        relations {
            //Fabric
            requiredDependency 'fabric-api'
            optionalDependency 'modmenu'
            embeddedLibrary 'cloth-config'

            //Forge
            optionalDependency 'cloth-config-forge'
        }
    }
    options {
        javaVersionAutoDetect = false
        javaIntegration = false
        forgeGradleIntegration = false
    }
}

import com.modrinth.minotaur.TaskModrinthUpload
import groovy.json.JsonOutput

task publishModrinth(type: TaskModrinthUpload, group: "upload") {
    dependsOn buildJar

    token = project.findProperty("modrinthToken") as String
    projectId = project.modrinth_project_id
    versionNumber = "${project.minecraft_version}-${project.version}"
    versionName = "${archivesBaseName}-${project.version}"
    uploadFile = jar
    addGameVersion(project.minecraft_version as String)
    addLoader("fabric")
    addLoader("forge")
    versionType = project.releaseType.toLowerCase()
    changelog = generateChangelog()
}

githubRelease {
    def tag = "${archivesBaseName}-${project.version}"

    owner = project.repoUser
    repo.set(project.repoName as String)
    token("${project.findProperty("githubReleaseToken")}")
    tagName.set(tag)
    releaseName.set(tag)
    targetCommitish.set("${project.minecraft_version}")
    body.set(generateChangelog())
}

// Update JSON management

import groovy.json.JsonSlurper

def writeUpdateJson() {
    def version = project.version
    def slurper = new JsonSlurper()
    def file = project.file('update.json')
    def json = slurper.parse(file)
    def changelogUrl = "https://github.com/${project.repoUser}/${project.repoName}/blob/${project.minecraft_version}/CHANGELOG.md"

    json['changelog'] = changelogUrl

    // TODO: Maybe add something to create an abbreviated changelog? May not be useful...
    if (!json[project.minecraft_version].containsKey(version.toString()))
        json[project.minecraft_version][version.toString()] = changelogUrl
    json[project.minecraft_version] = json[project.minecraft_version].sort([compare: { a, b -> b.compareTo(a) }] as Comparator)
    json['promos']["${project.minecraft_version}-latest"] = version
    json['promos']["${project.minecraft_version}-recommended"] = version

    println(json)
    file.write(JsonOutput.prettyPrint(JsonOutput.toJson(json)))
}

task createUpdateJson(group: "modding") {
    doLast {
        println('Updating update.json...')
        writeUpdateJson()
    }
}
build.finalizedBy createUpdateJson

static String generateChangelog() {
    def lastTag = "git describe --tags --abbrev=0".execute().text.trim()
    def beforeLastTag = "git describe --abbrev=0 --tags $lastTag^".execute().text.trim()
    def gitLogCmd = "git log $beforeLastTag...$lastTag --oneline --no-merges --pretty=format:\"%s\"".execute().text.trim()

    def changelog = ""
    gitLogCmd.eachLine { line ->
        if (line.contains("[skip-changelog]")) {
            return changelog
        }

        def escapedLine = line
        changelog += "* $escapedLine \n"
    }

    changelog += "\\n"
    changelog = changelog.trim()

    return changelog
}

task displayChangelog(group: "modding") {
    doLast {
        println(generateChangelog())
    }
}
